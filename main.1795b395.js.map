{"version":3,"sources":["../node_modules/card-changer/src/index.js","main.js"],"names":["CardChanger","element","stackSize","stackHeight","rootClassName","dotsNavigation","keepChangeOrder","animationSpeed","cards","activeCardId","unRotateOnChange","self","Error","_cards","map","id","pan","color","frontContent","backContent","_rootContainerElement","_cardsContainerElement","_dotsContainerElement","_activeCardIdx","evtHandlers","cn","args","result","reduce","acc","item","trim","escape","replace","on","type","handler","push","off","splice","indexOf","cardTemplate","updateCardElementsOrder","activeCardIdx","scaleDiff","translateDiff","i","length","el","dataset","order","removeAttribute","style","transform","zIndex","opacity","pointerEvents","querySelectorAll","forEach","classList","remove","lastElement","add","htmlToElement","html","template","document","createElement","innerHTML","content","firstChild","isElement","Element","HTMLDocument","Object","defineProperty","set","cardId","clearTimeout","_animationTimeoutId","_activeCardId","findIndex","card","prevActiveCardIdx","diff","evt","Math","abs","currentIdx","updatePositionTick","setTimeout","querySelector","slice","get","rotate","find","toggle","appendChild","generateCardElement","cardElement","frontContentElement","backContentElement","dotElement","generateDotElement","addEventListener","event","target","makeCardFront","makeCardBack","text","cardChanger","selectCardElement","idx","preventDefault","rotateButtonElement","key","value"],"mappings":"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","file":"main.1795b395.js","sourceRoot":"../src","sourcesContent":["import './style.scss';\n\nfunction CardChanger(\n  element,\n  {\n    stackSize = 3,\n    stackHeight = 60,\n    rootClassName = 'card-changer',\n    dotsNavigation = true,\n    keepChangeOrder = true,\n    animationSpeed = 150,\n    cards,\n    activeCardId,\n    unRotateOnChange = true,\n  } = {},\n) {\n  const self = this;\n\n  if (!cards) {\n    throw new Error('`cards` parameter is required');\n  }\n\n  self.element = element;\n  self._cards = cards.map(({ id, pan, color, frontContent, backContent }) => ({\n    id,\n    pan,\n    color,\n    frontContent,\n    backContent,\n  }));\n  self._rootContainerElement = null;\n  self._cardsContainerElement = null;\n  self._dotsContainerElement = null;\n  self._activeCardIdx = -1;\n\n  const evtHandlers = {};\n\n  self.on = function (type, handler) {\n    (evtHandlers[type] || (evtHandlers[type] = [])).push(handler);\n  };\n\n  self.off = function (type, handler) {\n    if (evtHandlers[type]) {\n      evtHandlers[type].splice(evtHandlers[type].indexOf(handler) >>> 0, 1);\n    }\n  };\n\n  function emit(type, evt) {\n    (evtHandlers[type] || []).slice().map((handler) => {\n      handler(evt);\n    });\n    (evtHandlers['*'] || []).slice().map((handler) => {\n      handler(type, evt);\n    });\n  }\n\n  function cn(...args) {\n    const result = args\n      .reduce((acc, item) => {\n        return `${acc}${rootClassName}__${item} `;\n      }, '')\n      .trim();\n    return escape(result.replace(/\\s&/g, ''));\n  }\n\n  const cardTemplate =\n    `\n    <div class=\"${cn('card')}\" data-card-id=\"{{CARD_ID}}\"> \n      <div class=\"${cn('card-form')}\">\n        <div class=\"${cn('card-front')}\"></div>\n        <div class=\"${cn('card-back')}\"></div>\n      </div>\n    </div>\n    `;\n\n  function updateCardElementsOrder(activeCardIdx) {\n    const scaleDiff = stackSize / 30;\n    const translateDiff = stackHeight / stackSize;\n\n    for (let i = 0; i < self._cards.length; i += 1) {\n      const el = self._cards[(activeCardIdx + i) % self._cards.length].element;\n      el.dataset.order = i;\n      el.removeAttribute('style');\n\n      if (i === stackSize) {\n        el.style.transform = 'scale(0.5) translateY(0px)';\n      } else if (i < stackSize) {\n        el.style.transform = `scale(${1 - scaleDiff * i}) translateY(${-translateDiff * i}px)`;\n      }\n      if (i <= stackSize) {\n        el.style.zIndex = `${100 - i}`;\n        el.style.opacity = `${1}`;\n      }\n\n      if (i === 0) {\n        el.style.pointerEvents = 'inherit';\n      }\n    }\n\n    self._cardsContainerElement\n      .querySelectorAll('.last')\n      .forEach((el) => el.classList.remove('last'));\n\n    if (self._cards.length > stackSize) {\n      const lastElement =\n        self._cards[(activeCardIdx + self._cards.length - 1) % self._cards.length].element;\n\n      lastElement.classList.add('last');\n\n      lastElement.style.transform = `scale(1.1) translateY(${translateDiff}px)`;\n      lastElement.style.zIndex = '101';\n      lastElement.style.opacity = '0';\n    }\n  }\n\n  Object.defineProperty(self, 'activeCardId', {\n    set: function (cardId) {\n      clearTimeout(self._animationTimeoutId);\n\n      if (self._activeCardId === cardId) {\n        return;\n      }\n\n      const activeCardIdx = self._cards.findIndex((card) => card.id === cardId);\n\n      const prevActiveCardIdx = self._activeCardIdx === -1 ? activeCardIdx : self._activeCardIdx;\n\n      if (activeCardIdx === -1) {\n        throw new Error('Setting active card with wrong id');\n      }\n\n      self._activeCardId = cardId;\n      self._activeCardIdx = activeCardIdx;\n\n      const diff = Math.abs(self._activeCardIdx - prevActiveCardIdx);\n\n      if (diff > 1 && diff !== self._cards.length - 1 && keepChangeOrder) {\n        let currentIdx = prevActiveCardIdx;\n\n        const updatePositionTick = () => {\n          currentIdx = (currentIdx + 1) % self._cards.length;\n          updateCardElementsOrder(currentIdx);\n          if (currentIdx !== activeCardIdx) {\n            self._animationTimeoutId = setTimeout(updatePositionTick, animationSpeed);\n          }\n        };\n\n        updatePositionTick();\n      } else {\n        updateCardElementsOrder(activeCardIdx);\n      }\n\n      if (unRotateOnChange) {\n        self._cardsContainerElement\n          .querySelectorAll('.rotate')\n          .forEach((el) => el.classList.remove('rotate'));\n      }\n\n      if (dotsNavigation) {\n        self._dotsContainerElement\n          .querySelectorAll('.active')\n          .forEach((el) => el.classList.remove('active'));\n\n        self._dotsContainerElement\n          .querySelector(`.${cn('dot')}[data-card-id=\"${self._activeCardId}\"]`)\n          .classList.add('active');\n      }\n\n      emit('change', self._activeCardId);\n    },\n    get: function () {\n      return self._activeCardId;\n    },\n  });\n\n  function htmlToElement(html) {\n    html = html || '';\n    const template = document.createElement('template');\n    template.innerHTML = html.trim();\n    return template.content.firstChild;\n  }\n\n  function isElement(element) {\n    return element instanceof Element || element instanceof HTMLDocument;\n  }\n\n  function generateCardElement(card) {\n    const cardElement = htmlToElement(cardTemplate.replace(/{{CARD_ID}}/g, card.id));\n\n    if (card.frontContent) {\n      const frontContentElement = isElement(card.frontContent)\n        ? card.frontContent\n        : htmlToElement(card.frontContent);\n      cardElement.querySelector(`.${cn('card-front')}`).appendChild(frontContentElement);\n    } else {\n      throw new Error('Card `frontContent` is required');\n    }\n\n    if (card.backContent) {\n      const backContentElement = isElement(card.backContent)\n        ? card.backContent\n        : htmlToElement(card.backContent);\n      cardElement.querySelector(`.${cn('card-back')}`).appendChild(backContentElement);\n    }\n\n    return cardElement;\n  }\n\n  function generateDotElement(card) {\n    const dotElement = htmlToElement(`<div class=\"${cn('dot')}\" data-card-id=\"${card.id}\"></div>`);\n\n    dotElement.addEventListener('click', function (event) {\n      self.activeCardId = event.target.dataset.cardId;\n    });\n\n    return dotElement;\n  }\n\n  self.rotate = function () {\n    const card = self._cards.find((card) => card.id === self._activeCardId);\n    card.element.classList.toggle('rotate');\n  };\n\n  function init() {\n    self.element.innerHTML = '';\n\n    self._rootContainerElement = htmlToElement(`<div class=\"${rootClassName}\"></div>`);\n    self.element.appendChild(self._rootContainerElement);\n\n    self._cardsContainerElement = htmlToElement(`<div class=\"${cn('cards-container')}\"></div>`);\n    self._rootContainerElement.appendChild(self._cardsContainerElement);\n\n    if (dotsNavigation) {\n      self._dotsContainerElement = htmlToElement(`<div class=\"${cn('dots-container')}\"></div>`);\n      self._rootContainerElement.appendChild(self._dotsContainerElement);\n    }\n\n    if (!self._cards) {\n      self._cardsContainerElement.innerHTML = 'No cards';\n      return;\n    }\n\n    self._cards.forEach((card) => {\n      card.element = generateCardElement(card);\n      self._cardsContainerElement.appendChild(card.element);\n\n      if (dotsNavigation) {\n        card.dotElement = generateDotElement(card);\n        self._dotsContainerElement.appendChild(card.dotElement);\n      }\n    });\n\n    self.activeCardId = activeCardId || self._cards[0].id;\n  }\n\n  init();\n\n  return this;\n}\n\nexport default CardChanger;\n","import CardChanger from 'card-changer';\n\nconst makeCardFront = ({ pan, color }) =>\n  `\n  <div class=\"card front\" style=\"background-color: ${color}\">\n    <div class=\"pan\">${pan}</div>\n  </div>\n  `;\n\nconst makeCardBack = ({ text = '', color = '#eee' }) =>\n  `\n  <div class=\"card back\" style=\"background-color: ${color}\">\n    <div class=\"pan\">${text}</div>\n  </div>\n  `;\n\nconst cards = [\n  {\n    id: 'card1',\n    frontContent: makeCardFront({ pan: '4485 6949 5850 1138', color: '#d9577c' }),\n    backContent: makeCardBack({ text: 'back here' }),\n  },\n  {\n    id: 'card2',\n    frontContent: makeCardFront({ pan: '5488 4098 4392 1365', color: '#76e856' }),\n    backContent: makeCardBack({ text: 'back here' }),\n  },\n  {\n    id: 'card3',\n    frontContent: makeCardFront({ pan: '5273 3166 5145 1675', color: '#4c90a1' }),\n    backContent: makeCardBack({ text: 'back here' }),\n  },\n  {\n    id: 'card4',\n    frontContent: makeCardFront({ pan: '4556 1113 4396 4008', color: '#e6634c' }),\n    backContent: makeCardBack({ text: 'back here' }),\n  },\n  {\n    id: 'card5',\n    frontContent: makeCardFront({ pan: '3013 7831 3642 3141', color: '#41c47c' }),\n    backContent: makeCardBack({ text: 'back here' }),\n  },\n  {\n    id: 'card6',\n    frontContent: makeCardFront({ pan: '3694 7476 1867 9614', color: '#8f476a' }),\n    backContent: makeCardBack({ text: 'back here' }),\n  },\n];\n\nconst cardChanger = new CardChanger(document.querySelector('#root'), {\n  cards,\n  activeCardId: 'card1',\n  stackSize: 3,\n  stackHeight: 40,\n  keepChangeOrder: true,\n});\n\nlet activeCardIdx = 0;\n\nconst selectCardElement = document.createElement('select');\nselectCardElement.innerHTML = cards.reduce((acc, item, idx) => {\n  acc += `<option value=\"${idx}\">${idx} - ${item.id}</option>`;\n  return acc;\n}, '');\ndocument.querySelector('#controls').appendChild(selectCardElement);\nselectCardElement.addEventListener('keydown', (event) => {\n  event.preventDefault();\n});\n\nconst rotateButtonElement = document.createElement('button');\nrotateButtonElement.innerHTML = 'Rotate active card';\nrotateButtonElement.addEventListener('click', () => {\n  cardChanger.rotate();\n});\ndocument.querySelector('#controls').appendChild(rotateButtonElement);\n\ndocument.addEventListener('keydown', (event) => {\n  switch (event.key) {\n    case 'ArrowLeft':\n    case 'ArrowUp':\n      activeCardIdx -= 1;\n      if (activeCardIdx === -1) {\n        activeCardIdx = cards.length - 1;\n      }\n      break;\n    case 'ArrowRight':\n    case 'ArrowDown':\n      activeCardIdx += 1;\n      activeCardIdx = activeCardIdx % cards.length;\n      break;\n  }\n  cardChanger.activeCardId = cards[activeCardIdx].id;\n  selectCardElement.value = activeCardIdx;\n});\n\nselectCardElement.addEventListener('change', (event) => {\n  activeCardIdx = event.target.value;\n  cardChanger.activeCardId = cards[event.target.value].id;\n});\n\ncardChanger.on('change', (cardId) => {\n  activeCardIdx = cards.findIndex((i) => i.id === cardId);\n  selectCardElement.value = activeCardIdx;\n});\n"]}